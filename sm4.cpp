#include "crypto.h"

// reference:
// https://tools.ietf.org/id/draft-crypto-sm4-00.html

// 6.2.1. Non-linear Transformation tau
const uint8_t sbox[] = {
    0xD6, 0x90, 0xE9, 0xFE, 0xCC, 0xE1, 0x3D, 0xB7, 0x16, 0xB6, 0x14, 0xC2,
    0x28, 0xFB, 0x2C, 0x05, 0x2B, 0x67, 0x9A, 0x76, 0x2A, 0xBE, 0x04, 0xC3,
    0xAA, 0x44, 0x13, 0x26, 0x49, 0x86, 0x06, 0x99, 0x9C, 0x42, 0x50, 0xF4,
    0x91, 0xEF, 0x98, 0x7A, 0x33, 0x54, 0x0B, 0x43, 0xED, 0xCF, 0xAC, 0x62,
    0xE4, 0xB3, 0x1C, 0xA9, 0xC9, 0x08, 0xE8, 0x95, 0x80, 0xDF, 0x94, 0xFA,
    0x75, 0x8F, 0x3F, 0xA6, 0x47, 0x07, 0xA7, 0xFC, 0xF3, 0x73, 0x17, 0xBA,
    0x83, 0x59, 0x3C, 0x19, 0xE6, 0x85, 0x4F, 0xA8, 0x68, 0x6B, 0x81, 0xB2,
    0x71, 0x64, 0xDA, 0x8B, 0xF8, 0xEB, 0x0F, 0x4B, 0x70, 0x56, 0x9D, 0x35,
    0x1E, 0x24, 0x0E, 0x5E, 0x63, 0x58, 0xD1, 0xA2, 0x25, 0x22, 0x7C, 0x3B,
    0x01, 0x21, 0x78, 0x87, 0xD4, 0x00, 0x46, 0x57, 0x9F, 0xD3, 0x27, 0x52,
    0x4C, 0x36, 0x02, 0xE7, 0xA0, 0xC4, 0xC8, 0x9E, 0xEA, 0xBF, 0x8A, 0xD2,
    0x40, 0xC7, 0x38, 0xB5, 0xA3, 0xF7, 0xF2, 0xCE, 0xF9, 0x61, 0x15, 0xA1,
    0xE0, 0xAE, 0x5D, 0xA4, 0x9B, 0x34, 0x1A, 0x55, 0xAD, 0x93, 0x32, 0x30,
    0xF5, 0x8C, 0xB1, 0xE3, 0x1D, 0xF6, 0xE2, 0x2E, 0x82, 0x66, 0xCA, 0x60,
    0xC0, 0x29, 0x23, 0xAB, 0x0D, 0x53, 0x4E, 0x6F, 0xD5, 0xDB, 0x37, 0x45,
    0xDE, 0xFD, 0x8E, 0x2F, 0x03, 0xFF, 0x6A, 0x72, 0x6D, 0x6C, 0x5B, 0x51,
    0x8D, 0x1B, 0xAF, 0x92, 0xBB, 0xDD, 0xBC, 0x7F, 0x11, 0xD9, 0x5C, 0x41,
    0x1F, 0x10, 0x5A, 0xD8, 0x0A, 0xC1, 0x31, 0x88, 0xA5, 0xCD, 0x7B, 0xBD,
    0x2D, 0x74, 0xD0, 0x12, 0xB8, 0xE5, 0xB4, 0xB0, 0x89, 0x69, 0x97, 0x4A,
    0x0C, 0x96, 0x77, 0x7E, 0x65, 0xB9, 0xF1, 0x09, 0xC5, 0x6E, 0xC6, 0x84,
    0x18, 0xF0, 0x7D, 0xEC, 0x3A, 0xDC, 0x4D, 0x20, 0x79, 0xEE, 0x5F, 0x3E,
    0xD7, 0xCB, 0x39, 0x48};

// 7.3.2. System Parameter FK
const uint32_t FK[4] = {0xA3B1BAC6, 0x56AA3350, 0x677D9197, 0xB27022DC};

// 7.3.3. Constant Parameter CK
const uint32_t CK[32] = {
    0x00070E15, 0x1C232A31, 0x383F464D, 0x545B6269, 0x70777E85, 0x8C939AA1,
    0xA8AFB6BD, 0xC4CBD2D9, 0xE0E7EEF5, 0xFC030A11, 0x181F262D, 0x343B4249,
    0x50575E65, 0x6C737A81, 0x888F969D, 0xA4ABB2B9, 0xC0C7CED5, 0xDCE3EAF1,
    0xF8FF060D, 0x141B2229, 0x30373E45, 0x4C535A61, 0x686F767D, 0x848B9299,
    0xA0A7AEB5, 0xBCC3CAD1, 0xD8DFE6ED, 0xF4FB0209, 0x10171E25, 0x2C333A41,
    0x484F565D, 0x646B7279};

inline uint32_t tau(uint32_t input) {
  uint32_t output = 0;
  for (int i = 0; i < 4; i++) {
    output |= (uint32_t)sbox[(input >> (i * 8)) & 0xFF] << (i * 8);
  }
  return output;
}

inline uint32_t l(uint32_t input) {
  uint32_t input2 = (input << 2) | (input >> 30);
  uint32_t input10 = (input << 10) | (input >> 22);
  uint32_t input18 = (input << 18) | (input >> 14);
  uint32_t input24 = (input << 24) | (input >> 8);
  return input ^ input2 ^ input10 ^ input18 ^ input24;
}

// 7.3.1. Transformation Function T'
inline uint32_t l1(uint32_t input) {
  uint32_t input13 = (input << 13) | (input >> 19);
  uint32_t input23 = (input << 23) | (input >> 9);
  return input ^ input13 ^ input23;
}

void sm4_cbc(bool encrypt, const std::vector<uint8_t> &input,
             const std::vector<uint8_t> &key, const std::vector<uint8_t> &iv,
             std::vector<uint8_t> &output) {
  // block size = 16 bytes
  assert(iv.size() == 16);
  assert((input.size() % 16) == 0);
  output.resize(input.size());
  // key size = 16 bytes
  assert(key.size() == 16);

  // key expansion
  // 32 rounds
  uint32_t k[32 + 4];
  uint32_t rk[32];
  // init K_0 to K_3
  for (int i = 0; i < 4; i++) {
    // K[i] = MK[i] ^ FK[i]
    uint32_t mk = (key[4 * i] << 24) | (key[4 * i + 1] << 16) |
                  (key[4 * i + 2] << 8) | key[4 * i + 3];
    k[i] = mk ^ FK[i];
  }
  for (int round = 0; round < 32; round++) {
    // K_{i + 4} = K_i xor T'(K_{i + 1} ^ K_{i + 2} ^ K_{i + 3} ^ CK_i)
    uint32_t temp = k[round + 1] ^ k[round + 2] ^ k[round + 3] ^ CK[round];
    // rk_i = K_{i + 4}
    k[round + 4] = k[round] ^ l1(tau(temp));
    rk[round] = k[round + 4];
  }

  // convert iv to 4 32bit integer
  uint64_t init_iv[4];
  for (int i = 0; i < 4; i++) {
    init_iv[i] = (iv[4 * i] << 24) | (iv[4 * i + 1] << 16) |
                 (iv[4 * i + 2] << 8) | iv[4 * i + 3];
  }

  // for each block
  for (int offset = 0; offset < input.size(); offset += 16) {
    uint32_t x[32 + 4];
    // fill X_0 to X_3
    for (int i = 0; i < 4; i++) {
      x[i] = (input[offset + 4 * i] << 24) | (input[offset + 4 * i + 1] << 16) |
             (input[offset + 4 * i + 2] << 8) | input[offset + 4 * i + 3];
      if (encrypt) {
        x[i] ^= init_iv[i];
      }
    }

    for (int round = 0; round < 32; round++) {
      // F(X_0, X_1, X_2, X_3, rk) = X_0 xor T(X_1 xor X_2 xor X_3 xor rk)
      // X_{i+4} = F(X_i, X_{i+1}, X_{i+2}, X_{i+3}, rk_i)
      uint32_t cur_rk = encrypt ? rk[round] : rk[31 - round];
      x[round + 4] =
          x[round] ^
          l(tau(x[round + 1] ^ x[round + 2] ^ x[round + 3] ^ cur_rk));
    }

    // in decryption, xor plain text with iv
    if (!encrypt) {
      for (int i = 0; i < 4; i++) {
        x[35 - i] ^= init_iv[i];
      }
    }

    // (Y_0, Y_1, Y_2, Y_3) = R(X_32, X_33, X_34, X_35)
    // R(X_32, X_33, X_34, X_35) = (X_35, X_34, X_33, X_32)
    for (int i = 0; i < 4; i++) {
      for (int j = 0; j < 4; j++) {
        output[offset + 4 * i + j] = (x[35 - i] >> ((3 - j) * 8)) & 0xFF;
      }
    }

    // in encryption, cipher text is used as new iv
    if (encrypt) {
      for (int i = 0; i < 4; i++) {
        init_iv[i] = x[35 - i];
      }
    } else {
      // in decryption, cipher text is used as new iv
      for (int i = 0; i < 4; i++) {
        init_iv[i] = x[i];
      }
    }
  }
}
